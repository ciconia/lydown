grammar Lydown
  include Lydown::Parsing

  rule lines
    line ([\n] line)* <Root>
  end
  rule stream_switch
    music_stream / lyrics_stream
  end
  rule music_stream
    '=' white_space? 'music' white_space? [\n] music ([\n] !stream_breaker music)*
  end
  rule lyrics_stream
    '=' white_space? 'lyrics' stream_idx? white_space? [\n] lyrics_content 
      ([\n] !stream_breaker lyrics_content)* <Lyrics>
  end
  rule stream_breaker
    stream_switch / stream_breaking_setting
  end
  rule stream_breaking_setting
  '-' white_space* ('part:' / 'movement:') setting_value comment?
  end
  rule line
    stream_switch / comment / setting / lyrics / music
  end
  rule comment
    '//' comment_content
  end
  rule comment_content
    [^\n]* <CommentContent>
  end
  rule setting
    white_space? '-' white_space* setting_key ':' setting_value 
      comment? <Setting>
  end
  rule setting_key
    [a-z0-9_]+ <Setting::Key>
  end
  rule setting_value
    (!"\n" !"//" .)* <Setting::Value>
  end
  rule music
    white_space? event* comment?
  end
  rule white_space
    [ \t]+
  end
  rule event
    (inline_command / inline_lyrics / voice_selector / barline / source_ref / 
      grace_duration / duration / standalone_figures / chord / note / rest / 
      silence / phrasing / tie) white_space*
  end
  rule barline
    ('?|' / ':|][|:' / '[|:' / ':|]' / [\|\.\:]+) <Barline>
  end
  rule duration
    tuplet_value / duration_value / duration_macro
  end
  rule grace_duration
    '$' grace_duration_type* number <GraceDuration>
  end
  rule grace_duration_type
    [\/\^]
  end
  rule tuplet_value
    number '%' (number '/' number)? <TupletValue>
  end
  rule duration_value
    duration_number dots* multiplier? <DurationValue>
  end
  rule duration_number
    [0-9]+ / 'l'
  end
  rule number
    [0-9]+
  end
  rule dots
    '.'+
  end
  rule multiplier
    '*' number ('/' number)*
  end
  rule duration_macro
    '{' duration_macro__expression '}'
  end
  rule duration_macro__expression
    (macro_name / macro_event*) <DurationMacroExpression>
  end
  rule macro_event
    (duration / note_placeholder / rest / silence / 
      phrasing / tie) white_space*
  end
  rule macro_name
    [a-zA-Z_] [a-zA-Z0-9_]*
  end
  rule note_placeholder
    [_@] expression*
  end
  rule note
    note_head octave* accidental_flag? figures? expression* <Note>
  end
  rule chord
    '<' note white_space* (note white_space*)* '>' expression* <Chord>
  end
  rule expression
    (expression_shorthand / expression_string / expression_longhand) <Note::Expression>
  end

  rule expression_shorthand
    [\_\.`]
  end
  rule expression_longhand
    '\\' [_\^]? [a-zA-Z]+
  end
  rule expression_string
    '\\' '_'? [<>\|]? string
  end
  rule string
    '"' ('\"' / !'"' .)* '"'
  end
  rule figures
    '<' figures_component? (white_space? figures_component)* '>'
  end
  rule figures_component
    ([_\-\.] / [#bh] / ([1-9] [\+\-\!\\'`]*)) <FiguresComponent>
  end
  rule standalone_figures
    duration_value? figures <StandAloneFigures>
  end
  rule rest
    [rR] multiplier* rest_expression* <Rest>
  end
  rule rest_expression
    (expression_string / expression_longhand) <Note::Expression>
  end
  rule silence
    [sS] multiplier* <Silence>
  end
  rule note_head
    [a-g@] octave* accidental* <Note::Head>
  end
  rule accidental
    [\+\-#ÃŸh]+
  end
  rule octave
    [\,']+ <Note::Octave>
  end
  rule accidental_flag
    [\!\?\^]+ <Note::AccidentalFlag>
  end
  rule phrasing
    beam_open / beam_close / slur_open / slur_close
  end
  rule beam_open
    [\[] white_space* <Phrasing::BeamOpen>
  end
  rule beam_close
    white_space* [\]] white_space* <Phrasing::BeamClose>
  end
  rule slur_open
    [\(] white_space* <Phrasing::SlurOpen>
  end
  rule slur_close
    white_space* [\)] white_space* <Phrasing::SlurClose>
  end
  rule tie
    regular_tie / short_tie
  end
  rule regular_tie
    '~' <Tie>
  end
  rule short_tie
    '&' <ShortTie>
  end
  rule lyrics
    '>' stream_idx? white_space* lyrics_content <Lyrics>
  end
  rule inline_lyrics
    '>' stream_idx? lyrics_quoted_content <Lyrics>
  end
  rule stream_idx
    '(' [\d] ')' <StreamIndex>
  end
  rule lyrics_content
    (!"\n" !"//" .)* <Lyrics::Content>
  end
  rule lyrics_quoted_content
    string <Lyrics::QuotedContent>
  end
  rule inline_command
    '\\' '!'? inline_command_key (':' inline_command_argument)* <Command>
  end
  rule inline_command_key
    [\<\>\|]? [a-zA-Z_0-9]+ <Command::Key>
  end
  rule inline_command_argument
    (string / [^\s\t\n\:]+) <Command::Argument>
  end
  rule voice_selector
    [1234u] ':' <VoiceSelector>
  end
  rule source_ref
  '{' source_line ':' source_column '}' <SourceRef>
  end
  rule source_line
    [\d]+ <SourceRef::Line>
  end
  rule source_column
    [\d]+ <SourceRef::Column>
  end  
end
